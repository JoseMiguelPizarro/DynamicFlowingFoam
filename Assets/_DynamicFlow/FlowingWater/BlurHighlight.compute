// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HorzPass
#pragma kernel VertPass

shared Texture2D<float4> source;
shared RWTexture2D<float4> horzOutput;
RWTexture2D<float4> output;
float radius;
float edgeWidth;
float shade;
float4 center;
int _blurRadius;

[numthreads(8, 8, 1)]
void HorzPass(uint3 id : SV_DispatchThreadID)
{
    int width;
    int height;

    source.GetDimensions(width, height);

    int left = max(0, (int)id.x - _blurRadius);
    int count = min(_blurRadius, (int)id.x) + min(_blurRadius, width - (int)id.x);
    float4 color = 0;

    uint2 index = uint2((uint)left, id.y);

    [unroll(100)]
    for (int x = 0; x < count; x++)
    {
        color += source[index];
        index.x++;
    }

    color /= (float)count;
    horzOutput[id.xy] = color;
}

[numthreads(8, 8, 1)]
void VertPass(uint3 id : SV_DispatchThreadID)
{
    int width;
    int height;

    source.GetDimensions(width, height);
    //Vert blur
    int top = max(0, (int)id.y - _blurRadius);
    int count = min(_blurRadius, (int)id.y) + min(_blurRadius, height - (int)id.y);
    float4 blurColor = 0;

    uint2 index = uint2(id.x, (uint)top);

    [unroll(100)]
    for (int y = 0; y < count; y++)
    {
        blurColor += horzOutput[index];
        index.y++;
    }

    blurColor /= (float)count;

    float4 shadedBlurColor = blurColor * shade;
    float4 color =shadedBlurColor;

    output[id.xy] = color;
}
